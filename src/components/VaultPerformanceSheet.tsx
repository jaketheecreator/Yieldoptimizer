'use client';

import React, { useEffect, useState } from 'react';

interface VaultPerformanceSheetProps {
  isOpen: boolean;
  onClose: () => void;
  vaultName: string;
  vaultIcon: string;
}

export function VaultPerformanceSheet({ isOpen, onClose, vaultName, vaultIcon }: VaultPerformanceSheetProps) {
  const [isAnimating, setIsAnimating] = useState(false);
  const [activeTimeframe, setActiveTimeframe] = useState<'1D' | '1W' | '1M' | '1Y'>('1D');

  useEffect(() => {
    if (isOpen) {
      setIsAnimating(true);
    }
  }, [isOpen]);

  if (!isOpen && !isAnimating) return null;

  return (
    <div className="fixed inset-0 z-50">
      {/* Backdrop */}
      <div 
        className={`fixed inset-0 bg-black/50 transition-opacity duration-300 ${
          isOpen ? 'opacity-100' : 'opacity-0'
        }`}
        onClick={onClose}
      />

      {/* Bottom Sheet */}
      <div 
        className={`fixed inset-x-0 bottom-0 transform transition-transform duration-300 ease-out ${
          isOpen ? 'translate-y-0' : 'translate-y-full'
        }`}
        onTransitionEnd={() => {
          if (!isOpen) setIsAnimating(false);
        }}
      >
        <div className="bg-[#1B2022] rounded-t-[32px] max-h-[90vh] overflow-y-auto">
          <div className="px-6 pt-8">
            {/* Header with Back Button */}
            <div className="flex items-center space-x-4 mb-6">
              <button 
                onClick={onClose}
                className="text-white p-1 -ml-1"
              >
                <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <span className="text-2xl font-semibold text-white">Deposit</span>
            </div>

            {/* Divider */}
            <div className="h-px bg-[#494D4E]/20 -mx-6 mb-6" />

            {/* Vault Info */}
            <div className="flex items-center space-x-3 mb-6">
              <img
                src={vaultIcon}
                alt={vaultName}
                width={32}
                height={32}
                className="w-8 h-8 rounded-full"
              />
              <h2 className="text-2xl font-semibold text-white">{vaultName}</h2>
            </div>

            {/* Description */}
            <div className="mb-8">
              <p className="text-[#A4A6A7] text-base">
                Deposit USDC to receive the yield-bearing nAsset, nUSDC.
                Yield accrues from the interest generated by depositing
                USDC from this vault to the nUSDC vault.
              </p>
              <p className="text-[#A4A6A7] text-base mt-4">
                Yield accrues from the interest generated by depositing
                USDC from this vault to the nUSDC vault.
              </p>
            </div>

            {/* Live Performance Section */}
            <div className="mb-8">
              {/* Header and Timeframe Controls */}
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-base font-medium text-white">Live Performance</h3>
                <div className="flex bg-[#2A2D2E] p-1.5 rounded-full">
                  {(['1D', '1W', '1M', '1Y'] as const).map((timeframe) => (
                    <button
                      key={timeframe}
                      onClick={() => setActiveTimeframe(timeframe)}
                      className={`py-2 px-4 rounded-full text-sm font-medium transition-all ${
                        activeTimeframe === timeframe
                          ? 'bg-white text-black'
                          : 'text-[#A4A6A7] hover:text-white'
                      }`}
                    >
                      {timeframe}
                    </button>
                  ))}
                </div>
              </div>

              {/* Performance Chart */}
              <div className="relative h-64 mb-4">
                {/* Y-axis labels */}
                <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-[#A4A6A7] text-sm">
                  <span>60%</span>
                  <span>40%</span>
                  <span>20%</span>
                  <span>0%</span>
                </div>

                {/* Chart Area */}
                <div className="absolute inset-0 pl-12">
                  {/* Grid lines */}
                  <div className="absolute inset-0 grid grid-rows-3 gap-0">
                    {[...Array(4)].map((_, i) => (
                      <div key={i} className="border-t border-[#494D4E]/20" />
                    ))}
                  </div>

                  {/* Performance Line */}
                  <svg className="w-full h-full" viewBox="0 0 300 200" preserveAspectRatio="none">
                    <defs>
                      <linearGradient id="lineGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                        <stop offset="0%" stopColor="#31C1BF" stopOpacity="0.2" />
                        <stop offset="100%" stopColor="#31C1BF" stopOpacity="0" />
                      </linearGradient>
                      <linearGradient id="lineColor" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" stopColor="#31C1BF" />
                        <stop offset="100%" stopColor="#4DFF00" />
                      </linearGradient>
                    </defs>
                    
                    {/* Area under the curve */}
                    <path
                      d="M0,160 C30,140 60,100 90,120 S150,80 180,60 S240,80 270,70 L270,200 L0,200 Z"
                      fill="url(#lineGradient)"
                    />
                    
                    {/* Main curve */}
                    <path
                      d="M0,160 C30,140 60,100 90,120 S150,80 180,60 S240,80 270,70"
                      fill="none"
                      stroke="url(#lineColor)"
                      strokeWidth="2"
                      strokeLinecap="round"
                    />
                    
                    {/* Data points */}
                    <circle cx="0" cy="160" r="4" fill="#31C1BF" />
                    <circle cx="90" cy="120" r="4" fill="#31C1BF" />
                    <circle cx="180" cy="60" r="4" fill="#31C1BF" />
                    <circle cx="270" cy="70" r="4" fill="#31C1BF" />
                  </svg>
                </div>

                {/* X-axis labels */}
                <div className="absolute bottom-0 left-12 right-4 flex justify-between text-[#A4A6A7] text-sm">
                  <span>Dec</span>
                  <span>Jan</span>
                  <span>Feb</span>
                  <span>Mar</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 